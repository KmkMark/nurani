<?php
// $Id$

/**
 * Implementation of hook_nodeapi().
 */
function nurani_custom_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  
  // If someone highlights a text, and redirected to term add page.
  if ($op == 'prepare' && $node->type == 'term' && !$node->nid) {
    
    if (isset($_GET['title']))
      $node->title = strtolower($_GET['title']);
    if (isset($_GET['language']))
      $node->language = $_GET['language'];
  }
}

/**
 * Implementation of template_preprocess_node().
 */
function nurani_custom_preprocess_node(&$vars) {
  
  if (in_array($vars['node']->type, array('discussion', 'text')) && user_access('create term content')) {
  
    $path = drupal_get_path('module', 'nurani_custom');
    drupal_add_js(array('nurani_custom' => array(
      'selected_node_lang' => $vars['node']->language // pass to new glossary form
    )), 'setting');
    drupal_add_js($path . '/js/jquery.selectlink.js');
    drupal_add_js($path . '/js/nurani_custom.js');
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function nurani_custom_menu_alter(&$items) {
  // Prohibit access to "Translate" tab because Translation Management module takes care of this.
  $items['node/%node/translate']['access callback'] = FALSE;
}

/**
 * Implementation of hook_theme().
 */
function nurani_custom_theme() {
  return array(
    'translation_status' => array(
      'arguments' => array('node' => NULL),
      'template' => 'translation-status',
    ),
  );
}

/**
 * Template preprocessor for theme('translation_status').
 */
function nurani_custom_preprocess_translation_status(&$vars) {
  $node = $vars['node'];
  $classes = array();
  $captions = array();
  if (empty($node->tnid)) {
    $classes[] = 'translation-status-untranslated';
    $captions[] = t('This !type is not translated.', array('!type' => $node->type));
  }
  else {
    if ($node->tnid == $node->nid) {
      $classes[] = 'translation-status-original';
      $original = $node;
      $translations = translation_node_get_translations($node->tnid);
      unset($translations[$node->language]);
      $translation = node_load(current($translations)->nid);
    }
    else {
      $classes[] = 'translation-status-translation';
      $original = node_load($node->tnid);
      $translation = $node;
    }
    $languages = language_list();
    $captions[] = t('Original !type in !original.', array(
      '!type' => $original->type, 
      '!original' => t($languages[$original->language]->name),
    ));
    $captions[] = t('Translated to !translation by !translator.', array(
      '!translation' => t($languages[$translation->language]->name), 
      '!translator' => $translation->name,
    ));
  }
  $vars['classes'] = $classes;
  $vars['captions'] = $captions;
}

