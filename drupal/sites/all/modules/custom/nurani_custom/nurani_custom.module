<?php

/**
 * Implementation of hook_init().
 */
function nurani_custom_init() {
  // TODO: Don't include these on every page.
  drupal_add_js(drupal_get_path('module', 'nurani_custom') . '/js/collapsed_blocks.js');
  drupal_add_js(drupal_get_path('module', 'nurani_custom') . '/js/collapsed_texts.js');
}


/**
 * Implementation of hook_nodeapi().
 */
function nurani_custom_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // Auto-translate content on content creation.
  if ($op == 'insert') {
    _nurani_custom_autotranslate($node);
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function nurani_custom_menu_alter(&$items) {
  // Control access to "Translate" tab.
  $items['node/%node/translate']['access callback'] = '_nurani_custom_translate_access';
  $items['node/%node/translate']['access arguments'] = array(1);
}

function _nurani_custom_translate_access($node) {
  // Allow access to "Translate" tab for static pages only.
  return $node->type == 'page';
}

/**
 * Implementation of hook_theme().
 */
function nurani_custom_theme() {
  $theme_functions = array(
    'translation_status' => array(
      'arguments' => array('node' => NULL),
      'template' => 'translation-status',
    ),
  );

  // Create additional node formatters for node references using Node Displays CCK.
  if (module_exists('nodereference') && module_exists('nd_cck')) {
    $build_modes = ds_get_build_modes('nd');
    foreach ($build_modes as $key => $build_mode) {
      $theme_functions['nurani_custom_formatter_node_'. $key . '_full'] = array(
        'arguments' => array('element'),
        'function' => 'theme_nurani_custom_node_formatter',
      );
    }
  }

  return $theme_functions;
}

/**
 * Theme function for custom CCK node formatter.
 */
function theme_nurani_custom_node_formatter($element) {
  static $recursion_queue = array();

  $output = '';
  $build_mode = str_replace(array('node_', '_full'), '', $element['#formatter']);

  if (!empty($element['#item']['nid']) && is_numeric($element['#item']['nid'])) {
    $node = $element['#node'];
    $field = content_fields($element['#field_name'], $element['#type_name']);
    // If no 'referencing node' is set, we are starting a new 'reference thread'
    if (!isset($node->referencing_node)) {
      $recursion_queue = array();
    }
    $recursion_queue[] = $node->nid;
    if (in_array($element['#item']['nid'], $recursion_queue)) {
      // Prevent infinite recursion caused by reference cycles:
      // if the node has already been rendered earlier in this 'thread',
      // we fall back to 'default' (node title) formatter.
      return theme('nodereference_formatter_default', $element);
    }
    if ($referenced_node = node_load($element['#item']['nid'])) {
      if ($referenced_node->status <> 0 || node_access('view', $referenced_node)) {
        $referenced_node->referencing_node = $node;
        $referenced_node->referencing_field = $field;
        $referenced_node->build_mode = $build_mode;
        _nodereference_titles($element['#item']['nid'], $referenced_node->title);
        $page = TRUE;
        $teaser = FALSE;
        $output = node_view($referenced_node, $teaser, $page, FALSE);
      }
    }
  }
  return $output;
}

/**
 * Template preprocessor for theme('translation_status').
 */
function nurani_custom_preprocess_translation_status(&$vars) {
  $node = $vars['node'];
  $types = node_get_types();
  $classes = array();
  $captions = array();

  drupal_add_js(drupal_get_path('module', 'nurani_custom') . '/js/translation_status.js');

  if (empty($node->tnid)) {
    // Should not come here because auto-translate is active.
    $classes[] = 'translation-status-untranslated';
    $captions[] = t('This !type is awaiting translation.', array('!type' => mb_strtolower($types[$node->type]->name)));
  }
  else {
    // Find translation status for node.
    $in_progress = _nurani_custom_translation_pending($node);

    // Build CSS class.
    if ($node->tnid == $node->nid) {
      $classes[] = 'translation-status-original';
      $original = $node;
      $translations = translation_node_get_translations($node->tnid);
      unset($translations[$node->language]);
      $translation = node_load(current($translations)->nid);
    }
    else if ($in_progress) {
      $classes[] = 'translation-status-placeholder';
      $original = node_load($node->tnid);
      $translation = $node;
    }
    else {
      $classes[] = 'translation-status-translation';
      $original = node_load($node->tnid);
      $translation = $node;
    }
    // Build status captions.
    $languages = language_list();
    $captions[] = t('Original !type in !original.', array(
      '!type' => mb_strtolower($types[$original->type]->name), 
      '!original' => t($languages[$original->language]->name),
    ));
    $uid = db_result(db_query("
SELECT tj.uid 
FROM {icl_translate_job} tj 
INNER JOIN {icl_content_status} cs ON tj.rid = cs.rid
WHERE cs.nid = %d
    ", $node->tnid));
    if ($in_progress) {
      if (empty($uid)) {
        $captions[] = t('This !type is awaiting translation.', array(
          '!type' => mb_strtolower($types[$node->type]->name),
        ));
      }
      else {
        $captions[] = t('This !type is awaiting translation by !translator.', array(
          '!type' => mb_strtolower($types[$node->type]->name),
          '!translator' => user_load($uid)->name,
        ));
      }
    }
    else {
      $captions[] = t('Translated to !translation by !translator.', array(
        '!translation' => t($languages[$translation->language]->name), 
        '!translator' => user_load($uid)->name,
      ));
    }
  }
  $vars['classes'] = $classes;
  $vars['captions'] = $captions;
}

/**
 * Helper function to autocreate a placeholder translation for each translatable node.
 */
function _nurani_custom_autotranslate($node) {
  if (!translation_supported_type($node->type)) return;
  if (!empty($node->translation_source) || !empty($node->tnid)) return;
  if (!empty($node->skip_autotranslate)) return;

  $languages = i18n_language_list(); // get all enabled languages
  unset($languages[$node->language]); //unset the languages of source node

  foreach ($languages as $langcode => $language) {
    $new_node = clone($node);
    unset($new_node->nid);
    unset($new_node->vid);
    unset($new_node->path);
    $new_node->language = $langcode;
    $new_node->tnid = $node->nid;
    $new_node->notifications_content_disable = TRUE;

    // If it's a comment, link to correct parent.
    if (!empty($node->comment_target_nid)) {
      $new_node->comment_target_nid = db_result(db_query("
SELECT translation.nid
FROM {node} parent LEFT JOIN {node} translation ON parent.tnid = translation.tnid
WHERE parent.nid = %d
AND translation.language = '%s'
      ", $node->comment_target_nid, $new_node->language));
    }

    node_save(node_submit($new_node));
  }
  
  // Update original node's tnid.
  $node->tnid = $node->nid;
  $node->notifications_content_disable = TRUE;
  node_save($node);
}

/**
 * Implementation of hook_link_alter().
 */
function nurani_custom_link_alter(&$links, $node, $comment = NULL) {
  // Hide language and comment links.
  if (!empty($links)) foreach ($links as $key => $link) {
    if (in_array($key, array('comment_add', 'node_translation_ar', 'node_translation_en'))) {
      unset($links[$key]);
    }
  }

  // Hide translation link from static pages.
  if ($node->type == 'page') {
    unset($links['nurani_translation']);
  }

  // Hide login/register link from everywhere.
  unset($links['login_register']);
}

/**
 * Implementation of hook_link().
 */
function nurani_custom_link($type, $object, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && $object->type == 'text') {
    $context = menu_get_object();
    if ($context && $context->type == 'discussion') {
      $links['text_more'] = array(
        'title' => t('more'),
        'href' => $_GET['q'],
      );
    }
  }
  

if ($type == 'node' && $object->type == 'text') {
    $context = menu_get_object();
    if ($context && $context->type == 'discussion') {
      $links['print_link'] = array(
        'title' => t('print'),
        'href' => 'print/' . $object->nid,
      );
    }
  }  
 
  if ($type == 'node' && translation_supported_type($object->type)) {
    if (($language = _nurani_custom_translation_pending($object, TRUE)) && user_access(ICL_TRANSLATE_DO_JOBS)) {
      // Create a translate link for translators if the node is pending translation.
      // TODO: For discussions and discussion comments, check that the translator exists in field_translators.
      // TODO: Check that translator can translate from source language to target language.
      $languages = i18n_language_list(); // get all enabled languages
      $links['nurani_translation'] = array(
        'title' => $object->type == 'text' ? $languages[$language] : t('translate'),
        'href' => 'translation/' . $object->nid,
      );
      // If we're translating a text in the context of a discussion, go back to this discussion after translation.
      if ($object->type == 'text') {
        $context = menu_get_object();
        if ($context && $context->type == 'discussion') {
          $links['nurani_translation']['query'] = array('destination' => 'node/' . $context->nid);
        }
      }
    }
  }

  return $links;
}

/** 
 * Implementation of hook_menu().
 */
function nurani_custom_menu() {
  $items = array();

  $items['translation/%node'] = array(
    'title' => 'Translate content',
    'page callback' => '_nurani_translation',
    'page arguments' => array(1),
    'access arguments' => array(ICL_TRANSLATE_DO_JOBS),
  );

  return $items;
}

/**
 * Menu callback function to create a new translation job on the fly.
 */
function _nurani_translation($node) {
  $original = node_load($node->tnid);
  $languages = i18n_language_list(); // get all enabled languages
  unset($languages[$original->language]); //unset the languages of source node
  global $user;
  $translators = array();
  foreach ($languages as $langcode => $langname) {
    $translators[$langcode] = array(
      'id' => $user->uid,
      'translation_service' => 'local',
    );
  }
  icl_content_translate_posts(array($original->nid), array_keys($languages), $translators); 
  $rid = db_result(db_query("SELECT rid FROM {icl_content_status} WHERE nid=%d", $original->nid));

  if (isset($_REQUEST['destination'])) {
    $destination = $_REQUEST['destination'];
    unset($_REQUEST['destination']);
  }
  drupal_goto('translate/' . $rid, empty($destination) ? NULL : array('destination' => $destination));
}

/**
 * Helper function to check if a node is pending translation.
 */
function _nurani_custom_translation_pending($node, $only_if_assigned_to_user = FALSE) {
  $statuses = _icl_content_statuses($node->tnid, 'node');
  foreach ($statuses as $status) {
    if ($status >= ICL_STATUS_READY) {
      return FALSE;
    }
  }

  // We can ask to skip those that are not assigned to current user.
  if ($only_if_assigned_to_user) {
    $uid = db_result(db_query("
SELECT job.uid 
FROM {icl_translate_job} job
INNER JOIN {icl_content_status} content ON content.rid = job.rid
WHERE content.nid = %d
    ", $node->tnid));
    global $user;
    if (!empty($uid) && $uid != $user->uid) {
      return FALSE;
    }
  }

  // Return the language name.
  $original = node_load($node->tnid);
  $languages = i18n_language_list(); // get all enabled languages
  unset($languages[$original->language]); //unset the languages of source node
  return key($languages);
}

/**
 * Implementation of hook_form_alter().
 */
function nurani_custom_form_alter(&$form, &$form_state, $form_id) {

  // Redirect to translated content, not jobs page.
    if ($form_id == 'icl_translate_editor') {
    $rid = $form['rid']['#default_value'];
    $job = db_fetch_object(db_query("
SELECT content.nid, core.target 
FROM {icl_core_status} core
INNER JOIN {icl_content_status} content ON core.rid = content.rid
WHERE core.rid = %d
    ", $rid));
    $original = node_load($job->nid);
    $target_nid = $original->nid;
    if (!empty($original->comment_target_nid)) {
      $target_nid = $original->comment_target_nid;
    }
    //$translations = translation_path_get_translations('node/' . $target_nid);
    $form['#redirect'] = drupal_get_path_alias('node/' . $target_nid);
  }

  // Add title description.
  if ($form_id == 'text_node_form') {
    $form['title']['#description'] = t('Include text, verse and chapter - for example Qur\'an 2:8-18 or Deuteronomy 4:5-8 or Corinthians 1:17-29.');
    $form['body']['#description'] = t('Submit the text passage here.');
  }

  // Disable autocomplete for password.
  if ($form_id == 'user_profile_form') {
    $form['#attributes']['autocomplete'] = 'off';
  }

  // Remove "Split summary at cursor".
  if (isset($form['body_field']['teaser_include'])) {
    $form['body_field']['teaser_include'] = array(
      '#type' => 'value',
      '#value' => TRUE,
    );
  }
  // Notify Users Checbox checked as default
  if($form_id == 'user_register') {
    $form['account']['notify']['#default_value'] = TRUE;
  }
  
  // Thought field mandatory- Create a discussion
  if ($form_id == 'discussion_node_form') {
    $form['body_field']['body']['#required']= 'TRUE';
  }
  
  if($form_id = 'discussion_node_form'){
    $form['body_field']['body']['#description']= t('250 Maximum word count');
  } 
    
}

/**
 * API function to return action links based on given user
 */
function nurani_custom_action_links($user = NULL) {
  if (empty($user)) {
    global $user;
  }
  $links = array();

  if ($user->uid > 0) {
    $links[] = array(
      'title' => t('Profile'),
      'href' => 'user',
    );
  }

  if (user_access(ICL_TRANSLATE_DO_JOBS, $user) || user_access(ICL_TRANSLATE_MANAGE_JOBS, $user)) {
    $links[] = array(
      'title' => t('Translation jobs'),
      'href' => 'translator/pending',
    );
  }

  if (user_access(ICL_TRANSLATE_MANAGE_JOBS, $user)) {
    $links[] = array(
      'title' => t('Manage translations'),
      'href' => 'admin/content/translation-management/dashboard',
    );
  }

  if (user_access('create discussion content', $user)) {
    $links[] = array(
      'title' => t('Start a new discussion'),
      'href' => 'node/add/discussion',
    );
  }

  if (user_access('create text content', $user)) {
    $links[] = array(
      'title' => t('Add a new text'),
      'href' => 'node/add/text',
    );
  }

 /* if (user_access('create term content', $user)) {
    $links[] = array(
      'title' => t('Add a new glossary term'),
      'href' => 'node/add/term',
    );
  }  */

  if (user_access('administer users', $user)) {
    $links[] = array(
      'title' => t('Manage users'),
      'href' => 'admin/user/user',
    );
  }
  
  if (user_access('create user', $user)) {
    $links[] = array(
      'title' => t('Create user'),
      'href' => 'admin/user/user/create',
    );
  }

  if ($user->uid > 0) {
    $links[] = array(
      'title' => t('Logout'),
      'href' => 'logout',
    );
  }
  else {
    $links[] = array(
      'title' => t('Login'),
      'href' => 'user',
    );
  }

  return $links;
}

/**
 * Implementation of hook_t_alter().
 */
function nurani_custom_t_alter(&$string, &$args, $langcode) {
  if ($string == 'Post new !type') {
    $string = 'Submit !type';
  }
  else if ($string == 'Create @name') {
    $string = 'Submit @name';
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function nurani_custom_field_formatter_info() {
  $formatters = array();

  if (module_exists('nodereference') && module_exists('nd_cck')) {
    $build_modes = ds_get_build_modes('nd');
    foreach ($build_modes as $key => $build_mode) {
      $formatters['node_'. $key . '_full'] = array(
        'label' => t('Build mode: @build_mode (with full body)', array('@build_mode' => $build_mode['title'])),
        'field types' => array('nodereference'),
        'multiple values' => CONTENT_HANDLE_CORE,
      );
    }
  }

  return $formatters;
}


