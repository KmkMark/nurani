<?php
/**
 * @file
 * Yallah extra custom code , for Notification system.
 */


/**
 * Implementation of hook_menu().
 */
function yallah_notifications_menu() {
  $items['user/%user/notifications'] = array(
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'yallah_notifications_access',
    'access arguments' => array(1),
    'title' => t('Notifications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yallah_notifications_user_page', 1),
    'weight' => 10,
  );
  return $items;
}

/**
 * Only allow users to see their own notification settings.
 */
function yallah_notifications_access($account) {
  global $user;
  return $user->uid == $account->uid || user_access('administer site configuration');
}

/**
 * Custom user notifications tab.
 */
function yallah_notifications_user_page($form_state, $account) {
  $options = array(
    'discussion' => t('New discussion'),
    'response' => t('New comment'),
    'profile' => t('New user'),
    'event' => t('New event'),
  );
  $form['subscriptions'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Please select the events for which you wish to be notified by email'),
    '#options' => $options,
    '#default_value' => variable_get('yallah_notifications_' . $account->uid, array('discussion', 'response', 'profile', 'event')),
  );  
  $form['account_uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration')
  );
  return $form;
}


function yallah_notifications_user_page_submit($form, &$form_state) {
  variable_set('yallah_notifications_' . $form_state['values']['account_uid'], $form_state['values']['subscriptions']); 
}

function yallah_notifications_action_info() {
  return array(
    'yallah_notifications_action' => array(
      'type' => 'node',
      'description' => t('Notify subscribed users'),
      'configurable' => TRUE,
    ),
  );
}

function yallah_notifications_action_form($context) {
  module_load_include('inc', 'token', 'token.pages');
  drupal_add_js('misc/collapse.js');
  foreach (language_list() as $langcode => $language) {
    $form['subject_' . $langcode] = array(
      '#type' => 'textfield',
      '#title' => t('Subject (!name)', array('!name' => $language->name)),
      '#description' => t('You can use the following tokens in your subject: <fieldset class="collapsible collapsed"><legend>Available tokens</legend>!tokens</fieldset>', 
        array('!tokens' => theme('token_help', array('node', 'global', 'user')))
      ),
      '#default_value' => @$context['subject_' . $langcode],
    );
    $form['message_' . $langcode] = array(
      '#type' => 'textarea',
      '#title' => t('Message (!name)', array('!name' => $language->name)),
      '#description' => t('You can use the following tokens in your message: <fieldset class="collapsible collapsed"><legend>Available tokens</legend>!tokens</fieldset>', 
        array('!tokens' => theme('token_help', array('node', 'global', 'user')))
      ),
      '#default_value' => @$context['message_' . $langcode],
    );
  }
  return $form;
}

function yallah_notifications_action_submit($form, $form_state) {
  $params = array();
  foreach (language_list() as $langcode => $language) {
    $params['subject_' . $langcode] = $form_state['values']['subject_' . $langcode];
    $params['message_' . $langcode] = $form_state['values']['message_' . $langcode];
  }
  return $params;
}

function yallah_notifications_action($node, $context) {
  global $language;
  $current_language = $language;
  $languages = language_list();

  // If profile, notify everyone who is activated (has signed agreement).
  // If public discussion or comment, do the same.
  // If private discussion or comment, only notify invited people.
  $uids = array();
  $notify_all = TRUE;
  if ($node->type == 'discussion' && $node->private == 0) {
    $notify_all = FALSE;
  }
  else if ($node->type == 'response') {
    $discussion = node_load($node->comment_target_nid);
    if ($discussion && $discussion->private == 0) {
      $notify_all = FALSE;
    }
  }
  if ($notify_all) {
    $result = db_query("SELECT u.uid FROM {users} u LEFT JOIN {agreement} a ON u.uid = a.uid WHERE u.status=1 AND (a.agreed=1 OR u.uid=1)");
    while ($user = db_fetch_object($result)) {
      $uids[] = $user->uid;
    }
  }
  else {
    if (empty($discussion)) {
      $discussion = $node;
    }
    foreach (array('field_moderators', 'field_participants') as $field) {
      foreach ($discussion->$field as $delta => $item) {
        $uids[] = $item['uid'];
      }
    }
  }

  // Loop on recipients.
  foreach ($uids as $uid) {
    // Don't notify node author.
    if ($uid == $node->uid) continue;
    $user = user_load($uid);

    // Ignore users whose chosen language is not the same as the node's language.
    if ($node->type != 'profile' && $user->language != $node->language) continue;

    // Ignore users who have opted out from this notification.
    $subscriptions = variable_get('yallah_notifications_' . $uid, array('discussion', 'response', 'profile', 'event'));
    if (!in_array($node->type, array_filter($subscriptions))) continue;

    // Send the email in the user's chosen language.
    $language = $languages[$user->language];
    $subject = !empty($context['subject_' . $user->language]) ? $context['subject_' . $user->language] : $context['subject_en'];
    $message = !empty($context['message_' . $user->language]) ? $context['message_' . $user->language] : $context['message_en'];
    $content = array(
      'id' => 'yallah_notification',
      'to' => $user->mail,
      'subject' => token_replace_multiple($subject, array('node' => $node, 'user' => $user)),
      'body' => token_replace_multiple($message, array('node' => $node, 'user' => $user)),
      'headers' => array(
        'From' => 'The Nurani Team <cip@divinity.cam.ac.uk>',
      ),
    );
    drupal_mail_send($content);
  }

  // Restore current language.
  $language = $current_language;
}

function yallah_notifications_form_agreement_form_alter(&$form, &$form_state) {
  $form['submit']['#submit'][] = 'agreement_form_submit';
  $form['submit']['#submit'][] = 'yallah_notifications_form_agreement_submit';
}

function yallah_notifications_form_agreement_submit($form, &$form_state) {
  $uid = $form_state['values']['uid'];
  $agree = $form_state['values']['agree'];
  if ($agree) {
    rules_invoke_event('agreement_event', user_load(array('uid' => $uid)));
  }
}

function yallah_notifications_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'node' || $type == 'all') {
    $tokens['node']['node-body-trimmed'] = t("The node body trimmed to 200 chars.");
  }
  return $tokens;
}

function yallah_notifications_token_values($type, $object = NULL, $options = array()) {
  $values = array();
  if ($type == 'node' && !empty($object)) {
    $values['node-body-trimmed'] = substr($node->body, 200);
  }
  return $values;
}

