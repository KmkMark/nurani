<?php

/**
 * Implements hook_theme().
 */
function nurani_bundle_theme($existing, $type, $theme, $path) {
  return array(
    'nurani_bundle_formatter' => array(
      'variables' => array('item' => NULL),
    ),
    'nurani_bundle_ui' => array(
      'render element' => 'element',
    ),
    'nurani_bundle_ui_passage_box' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function nurani_bundle_menu() {
  $items = array();
  $items['nurani_bundle/clone_bundle/%node/%'] = array(
    'title' => 'CloneBundle action',
    'description' => 'Returns a JSON response containing the details of a bundle.',
    'page callback' => 'nurani_bundle_clone_bundle_json',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['nurani_bundle/validate_passage'] = array(
    'title' => 'ValidatePassage action',
    'description' => 'Returns a JSON response based on whether a passage is valid or not.',
    'page callback' => 'nurani_bundle_validate_passage_json',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_field_widget_form_alter()
 */
function nurani_bundle_field_widget_form_alter(&$element, &$form_state, $context) {
  $field      = $context['field'];
  $langcode   = $element['nid']['#language'];
  $delta      = $element['nid']['#delta'];
  // #default_value will be the raw bundle NID at this stage
  $bundle_nid = $element['nid']['#default_value'];

  if ($field['type'] != 'node_reference' || $field['field_name'] != 'field_bundle') {
    return;
  }

  $edit = _nurani_bundle_combine_edit_data($bundle_nid, $langcode, $delta, $form_state);

  // Hide the existing node reference widget
  $element['nid']['#type'] = 'hidden';
  // Add the custom bundle UI
  $path = drupal_get_path('module', 'nurani_bundle');
  $element['ui'] = array(
    '#theme' => 'nurani_bundle_ui',
    '#attached' => array(
      'css' => array($path . '/css/nurani_bundle_ui.css'),
      'js'  => array($path . '/js/nurani_bundle_ui.js'),
    ),
    '#bundle_nid' => $bundle_nid,
    'clone' => nurani_bundle_clone_form($field, $edit['ui']['clone'], $context),
    'passages' => nurani_bundle_passages_form($field, $edit['ui']['passages'], $context),
  );

  // The validation runs before node_reference which enables the UI data to
  // transparently integrate.
  array_unshift($element['nid']['#element_validate'], 'nurani_bundle_ui_element_validate');
  // Submission handler attached to the overall form. This is where new objects /
  // bundles are created, if necessary.
  $context['form']['#submit'][] = 'nurani_bundle_ui_submit';
}

/**
 * Form elements for the clone <select>.
 */
function nurani_bundle_clone_form($field, &$edit, $context) {
  $element = array();
  $discussion_bundle_options = node_reference_options_list($field);
  foreach ($discussion_bundle_options as $key => $value) {
    // TODO: Fetch the real discussion title to prepend to the bundle name.
    $discussion_title = t('Unknown discussion');
    $discussion_bundle_options[$key] = $discussion_title . ': ' . $value;
  }
  $element['clone'] = array(
    '#type' => 'select',
    '#title' => t('Use passages from existing discussion'),
    '#default_value' => '',
    '#options' => array('' => t('- Choose a discussion -')) + $discussion_bundle_options,
    '#required' => FALSE,
  );
  $element['load'] = array(
    '#type' => 'button',
    '#value' => t('Load passages'),
    '#attributes' => array('class' => array('clone-bundle-action')),
  );
  return $element;
}

/**
 * Form elements for the passages fields.
 */
function nurani_bundle_passages_form($field, &$edit, $context) {
  $element = array();
  $element['#tree'] = TRUE;

  foreach (array(0, 1, 2) as $delta) {
    $element[$delta] = array();
    $element[$delta]['#delta'] = $delta;
    $element[$delta]['#theme'] = 'nurani_bundle_ui_passage_box';

    $element[$delta]['remove'] = array(
      '#type' => 'submit',
      '#value' => t('Remove passage'),
      '#attributes' => array('class' => array('remove-passage-action')),
    );
    $element[$delta]['add'] = array(
      '#type' => 'submit',
      '#value' => t('Add passage'),
      '#attributes' => array('class' => array('pick-passage-action')),
    );
    $element[$delta]['osisID'] = array(
      '#type' => 'hidden',
      '#value' => isset($edit[$delta]['osisID']) ? $edit[$delta]['osisID'] : '',
      '#attributes' => array('class' => array('edit-osisID')),
    );
    $element[$delta]['osisIDWork'] = array(
      '#type' => 'hidden',
      '#value' => isset($edit[$delta]['osisIDWork']) ? $edit[$delta]['osisIDWork'] : '',
      '#attributes' => array('class' => array('edit-osisIDWork')),
    );
    // Using 'moderator_s_thoughts' to match the field_moderator_s_thoughts on
    // the bundle content type.
    $element[$delta]['moderator_s_thoughts'] = array(
      '#type' => 'textarea',
      '#title' => t("Moderator's thoughts"),
      '#cols' => 20,
      '#rows' => 5,
      '#default_value' => isset($edit[$delta]['moderator_s_thoughts']) ? $edit[$delta]['moderator_s_thoughts'] : '',
      '#attributes' => array('class' => array('edit-moderator_s_thoughts')),
    );
    $element[$delta]['visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Is visible?'),
      '#default_value' => isset($edit[$delta]['visible']) ? $edit[$delta]['visible'] : '',
      '#attributes' => array('class' => array('edit-visible')),
    );
  }

  return $element;
}

/**
 * Theme function to display the bundle UI.
 */
function theme_nurani_bundle_ui(&$variables) {
  $element = &$variables['element'];

  $output  = '';
  $output .= '<div class="clone-bundle clearfix">';
  $output .=   '<div class="inner">';
  $output .=     drupal_render($element['clone']);
  $output .=   '</div>';
  $output .= '</div>';
  $output .= '<div class="passage-boxes clearfix">';
  $output .=   '<div class="inner">';
  $output .=     drupal_render($element['passages']);
  $output .=   '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Theme function to render a passage box for the bundle UI.
 */
function theme_nurani_bundle_ui_passage_box(&$variables) {
  $element = &$variables['element'];
  $delta   = $element['#delta'];

  switch ($delta % 3) {
    case 0: $number = 'first'; break;
    case 1: $number = 'second'; break;
    case 2: $number = 'third'; break;
  }

  $output  = '';
  $output .= '<div class="passage-box passage-box-' . $delta . ' ' . $number . '">';
  $output .=   '<div class="inner">';
  $output .=     '<div class="passage-text empty">';
  $output .=       '<div class="passage-widget"></div>';
  $output .=       drupal_render($element['remove']);
  $output .=       drupal_render($element['add']);
  $output .=       drupal_render($element['osisID']);
  $output .=       drupal_render($element['osisIDWork']);
  $output .=     '</div>';
  $output .=     '<div class="bib">';
  $output .=       drupal_render($element['moderator_s_thoughts']);
  $output .=       drupal_render($element['visible']);
  $output .=     '</div>';
  $output .=   '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Combines an existing bundle with $form_state data to generate a combined edit
 * array.
 */
function _nurani_bundle_combine_edit_data($bundle_nid, $langcode, $delta, $form_state) {
  // Default empty edit array, ensure at least the 'passages' and 'clone' keys
  // exist to avoid PHP notices
  $edit = array(
    'ui' => array(
      'passages' => array(),
      'clone' => array(),
    ),
  );

  // Load existing bundle data into the $edit array, if available
  if ($bundle_nid) {
    $bundle = node_load($bundle_nid);

    foreach ($bundle->field_passage_collection[$langcode] as $pc_delta => $pc_data) {
      $item = field_collection_item_load($pc_data['value']);

      foreach (array('field_moderator_s_thoughts', 'field_passage', 'field_visible') as $field_name) {
        $edit_name = substr($field_name, 6); // Remove the 'field_' part

        foreach ($item->{$field_name} as $item_field_langcode => $item_field_deltas) {
          foreach ($item_field_deltas as $item_field_delta => $item_field_data) {
            if ($field_name == 'field_passage') {
              $edit['ui']['passages'][$pc_delta]['osisIDWork'] = $item_field_data['osisIDWork'];
              $edit['ui']['passages'][$pc_delta]['osisID'] = $item_field_data['osisID'];
            }
            else {
              $edit['ui']['passages'][$pc_delta][$edit_name] = $item_field_data['value'];
            }
          }
        }
      }
    }
  }

  // Overwrite $edit using form_state, if available
  if (isset($form_state['input']) && isset($form_state['input']['field_bundle'])) {
    foreach ($form_state['input']['field_bundle'][$langcode][$delta] as $key => $val) {
      $edit[$key] = $val;
    }
  }

  return $edit;
}

/**
 * Form validation for Nurani Bundle UI.
 */
function nurani_bundle_ui_element_validate($element, &$form_state, $form) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  // dpm($field, '$field validate');
  // dpm($instance, '$instance validate');
  // dpm($element, '$element validate');
  // dpm($form_state, '$form_state validate');
  // dpm($form, '$form validate');
}

/**
 * Form submission for Nurani Bundle UI.
 */
function nurani_bundle_ui_submit($element, &$form_state, $form) {
  dpm($form_state, '$form_state submit');
}

/**
 * Page callback to generate JSON output for "cloning" a bundle.
 */
function nurani_bundle_clone_bundle_json($bundle_node, $langcode = LANGUAGE_NONE) {
  if (!$bundle_node || $bundle_node->type != 'bundle') {
    return drupal_json_output(FALSE);
  }

  // (Ab)use the _nurani_bundle_combine_edit_data to generate a useful array
  // representation of a bundle's core data fields.
  $edit = _nurani_bundle_combine_edit_data($bundle_node->nid, $langcode, 0, array());
  return drupal_json_output($edit['ui']['passages']);
}

/**
 * Page callback to generate JSON output for validating an OSIS identifier.
 */
function nurani_bundle_validate_passage_json($osisIDWork, $osisID) {
  $item = array('osisIDWork' => $osisIDWork, 'osisID' => $osisID);
  $delta = 0;
  $field = array('field_name' => 'field_bundle');

  // (Ab)use the osis_field module's validation since it is the gold standard
  // for valid OSIS passages in the system.
  $is_valid = _osis_field_validate($item, $delta, $field, NULL, NULL);

  if ($is_valid) {
    return drupal_json_output(TRUE);
  }
  else {
    $errors = form_get_errors();
    return drupal_json_output(array('errors' => $errors));
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function nurani_bundle_field_formatter_info() {
  $formatters = array(
    'nurani_bundle' => array(
      'label' => t('Nurani Bundle'),
      'field types' => array('node_reference'),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function nurani_bundle_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function nurani_bundle_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'nurani_bundle_formatter',
      '#item' => $item,
    );
  }

  return $element;
}

/**
 * Returns HTML for an nurani_bundle field formatter.
 */
function theme_nurani_bundle_formatter($variables) {
  $item = $variables['item'];

  $output = 'Hello.';

  return $output;
}
