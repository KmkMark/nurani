<?php

/**
 * Implements hook_theme().
 */
function nurani_bundle_theme($existing, $type, $theme, $path) {
  return array(
    'nurani_bundle_formatter' => array(
      'variables' => array('item' => NULL),
    ),
    'nurani_bundle_ui' => array(
      'render element' => 'element',
    ),
    'nurani_bundle_ui_passage_box' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_field_widget_form_alter()
 */
function nurani_bundle_field_widget_form_alter(&$element, &$form_state, $context) {
  $field = $context['field'];

  if ($field['type'] != 'node_reference' || $field['field_name'] != 'field_bundle') {
    return;
  }

  // TODO: Merge existing data together with the $form_state here to make an $edit array
  $bundle = $passages_collection = FALSE;
  $edit = array(0 => array(), 1 => array(), 2 => array());
  if ($element['#bundle_nid']) {
    $bundle = node_load($element['#bundle_nid']);
    $passages_collection = field_collection_item_load($bundle->field_passage_collection[LANGUAGE_NONE][0]['value']);

    foreach (array('field_moderator_s_thoughts', 'field_passage', 'field_visible') as $field_name) {
      foreach ($passages_collection->{$field_name} as $langcode => $deltas) {
        foreach ($deltas as $delta => $value) {
          $edit[$delta][$field_name][$langcode] = $value;
        }
      }
    }
  }

  // Hide the existing node reference widget
  $element['nid']['#type'] = 'hidden';
  // Add the custom bundle UI
  $path = drupal_get_path('module', 'nurani_bundle');
  $element['ui'] = array(
    '#theme' => 'nurani_bundle_ui',
    '#attached' => array(
      'css' => array($path . '/css/nurani_bundle_ui.css'),
      'js'  => array($path . '/js/nurani_bundle_ui.js'),
    ),
    // #default_value will be the raw bundle NID at this stage
    '#bundle_nid' => $element['nid']['#default_value'],
    'clone' => nurani_bundle_clone_form($field, $form_state, $context),
    'passages' => nurani_bundle_passages_form($field, $form_state, $context),
  );
}

/**
 * Form elements for the clone <select>.
 */
function nurani_bundle_clone_form($field, &$form_state, $context) {
  $element = array();
  $discussion_bundle_options = node_reference_options_list($field);
  foreach ($discussion_bundle_options as $key => $value) {
    // TODO: Fetch the real discussion title to prepend to the bundle name.
    $discussion_title = t('Unknown discussion');
    $discussion_bundle_options[$key] = $discussion_title . ': ' . $value;
  }
  $element['clone'] = array(
    '#type' => 'select',
    '#title' => t('Use passages from existing discussion'),
    '#default_value' => '',
    '#options' => array('' => t('- Choose a discussion -')) + $discussion_bundle_options,
    '#required' => FALSE,
  );
  $element['load'] = array(
    '#type' => 'submit',
    '#value' => t('Load passages'),
    '#attributes' => array('class' => array('clone-bundle-action')),
  );
  return $element;
}

/**
 * Form elements for the passages fields.
 */
function nurani_bundle_passages_form($field, &$form_state, $context) {
  $edit = $form_state['values']['passages'];
  $element = array();
  $element['#tree'] = TRUE;

  foreach (array(0, 1, 2) as $delta) {
    $element[$delta] = array();
    $element[$delta]['#delta'] = $delta;
    $element[$delta]['#theme'] = 'nurani_bundle_ui_passage_box';

    $element[$delta]['add'] = array(
      '#type' => 'submit',
      '#value' => t('Add passage'),
      '#attributes' => array('class' => array('pick-passage-action')),
    );
    $element[$delta]['osisID'] = array(
      '#type' => 'hidden',
      '#value' => $edit['osisID'],
      '#attributes' => array('class' => array('edit-osisID')),
    );
    $element[$delta]['osisIDWork'] = array(
      '#type' => 'hidden',
      '#value' => $edit['osisIDWork'],
      '#attributes' => array('class' => array('edit-osisIDWork')),
    );
    $element[$delta]['moderators_thoughts'] = array(
      '#type' => 'textarea',
      '#title' => t("Moderator's thoughts"),
      '#cols' => 20,
      '#rows' => 5,
      '#default_value' => $edit['moderators_thoughts'],
      '#attributes' => array('class' => array('edit-moderators_thoughts')),
    );
    $element[$delta]['visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Is visible?'),
      '#default_value' => $edit['visible'],
      '#attributes' => array('class' => array('edit-visible')),
    );
  }

  return $element;
}

/**
 * Theme function to display the bundle UI.
 */
function theme_nurani_bundle_ui(&$variables) {
  $element = &$variables['element'];

  $output  = '';
  $output .= '<div class="clone-bundle clearfix">';
  $output .=   '<div class="inner">';
  $output .=     drupal_render($element['clone']);
  $output .=   '</div>';
  $output .= '</div>';
  $output .= '<div class="passage-boxes clearfix">';
  $output .=   '<div class="inner">';
  $output .=     drupal_render($element['passages']);
  $output .=   '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Theme function to render a passage box for the bundle UI.
 */
function theme_nurani_bundle_ui_passage_box(&$variables) {
  $element = &$variables['element'];
  $delta   = $element['#delta'];

  switch ($delta % 3) {
    case 0: $number = 'first'; break;
    case 1: $number = 'second'; break;
    case 2: $number = 'third'; break;
  }

  $output  = '';
  $output .= '<div class="passage-box passage-box-' . $delta . ' ' . $number . '">';
  $output .=   '<div class="inner">';
  $output .=     '<div class="passage-text empty">';
  $output .=       drupal_render($element['add']);
  $output .=       drupal_render($element['osisID']);
  $output .=       drupal_render($element['osisIDWork']);
  $output .=     '</div>';
  $output .=     '<div class="bib">';
  $output .=       drupal_render($element['moderators_thoughts']);
  $output .=       drupal_render($element['visible']);
  $output .=     '</div>';
  $output .=   '</div>';
  $output .= '</div>';


  return $output;
}

/**
 * Implements hook_field_formatter_info().
 */
function nurani_bundle_field_formatter_info() {
  $formatters = array(
    'nurani_bundle' => array(
      'label' => t('Nurani Bundle'),
      'field types' => array('node_reference'),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function nurani_bundle_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function nurani_bundle_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'nurani_bundle_formatter',
      '#item' => $item,
    );
  }

  return $element;
}

/**
 * Returns HTML for an nurani_bundle field formatter.
 */
function theme_nurani_bundle_formatter($variables) {
  $item = $variables['item'];

  $output = 'Hello.';

  return $output;
}
