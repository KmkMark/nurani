<?php

require_once dirname(__FILE__) . '/nurani_helpers.inc';

/**
 * Implements hook_theme().
 */
function nurani_helpers_theme($existing, $type, $theme, $path) {
  $base = array(
    'path' => drupal_get_path('module', 'nurani_helpers'),
    'file' => 'nurani_helpers.theme.inc',
  );

  return array(
    'nurani_attribution' => $base + array(
      'variables' => array('author' => NULL, 'timestamp' => NULL),
    ),
    'nurani_helpers_block_welcome_login' => $base + array(
      'variables' => array('author' => NULL),
    ),
    'nurani_helpers_block_recent_annotations' => $base + array(
      'variables' => array('annotations' => array()),
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function nurani_helpers_preprocess_page(&$variables) {
  // Add spin.js (see: http://fgnass.github.com/spin.js/)
  drupal_add_js(drupal_get_path('theme', 'bowerbird') . '/js/spin.min.js');
  // Add global spin.js settings for this theme
  drupal_add_js(array(
    'spin' => array(
      'lines' => 7, // The number of lines to draw
      'length' => 0, // The length of each line
      'width' => 20, // The line thickness
      'radius' => 0, // The radius of the inner circle
      'corners' => 1, // Corner roundness (0..1)
      'rotate' => 0, // The rotation offset
      'color' => '#fff', // #rgb or #rrggbb
      'speed' => 0.7, // Rounds per second
      'trail' => 56, // Afterglow percentage
      'shadow' => false, // Whether to render a shadow
      'hwaccel' => false, // Whether to use hardware acceleration
      'className' => 'spinner', // The CSS class to assign to the spinner
      'zIndex' => 2e9, // The z-index (defaults to 2000000000)
      'top' => 'auto', // Top position relative to parent in px
      'left' => 'auto' // Left position relative to parent in px
    ),
  ), 'setting');
}

/**
 * Implements hook_block_info().
 */
function nurani_helpers_block_info() {
  $blocks = array();
  $blocks['welcome_login'] = array(
    'info' => t('Nurani login / welcome'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['recent_annotations'] = array(
    'info' => t('Recent annotations'),
    'cache' => DRUPAL_NO_CACHE
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function nurani_helpers_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'welcome_login':
      $block['subject'] = NULL;
      $block['content'] = theme('nurani_helpers_block_welcome_login', array('account' => $user));
      break;
    case 'recent_annotations':
      $block['subject'] = t("New library annotations");
      $page = 0;
      $block['content'] = theme('nurani_helpers_block_recent_annotations', array('annotations' => nurani_helpers_recent_annotations($user, $page, 20)));
      break;
  }

  return $block;
}

/**
 * Implements hook_date_format_types().
 *
 * NOTE: This is in nurani_helpers because date formats are not yet supported by
 *       the features module. see: http://drupal.org/node/1279928#comment-6106170
 */
function nurani_helpers_date_format_types() {
  return array(
    'date_of_birth' => t('Date of birth'),
    'attribution' => t('Attribution time'),
  );
}

/**
 * Implements hook_date_formats().
 *
 * NOTE: This is in nurani_helpers because date formats are not yet supported by
 *       the features module. see: http://drupal.org/node/1279928#comment-6106170
 */
function nurani_helpers_date_formats() {
  $formats = array();
  $formats[] = array(
    'type' => 'date_of_birth',
    'format' => 'j F, Y',
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'attribution',
    'format' => 'D j M, g A',
    'locales' => array(),
  );
  return $formats;
}

/**
 * Implements hook_form_alter().
 */
function nurani_helpers_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'discussion_node_form') {
    // Extra helper CSS to apply a Nurani specific style to the bundle UI.
    $form['field_bundle']['und'][0]['ui']['#attached']['css'][] = drupal_get_path('module', 'nurani_helpers') . '/css/nurani_helpers_bundle_ui.css';
  }
  if ($form_id == 'user_profile_form') {
    global $user;

    $viewer_is_admin      = in_array('administrator', $user->roles);
    $target_is_restricted = in_array('administrator', $form['#user']->roles) ||
                            in_array('API', $form['#user']->roles);

    if (!$viewer_is_admin && $target_is_restricted) {
      drupal_access_denied();
      drupal_exit();
    }
  }
  if ($form_id == 'user_register_form') {
    $form['#groups']['group_details']->format_settings['formatter'] = 'open';
    $form['#groups']['group_profile']->format_settings['formatter'] = 'open';
    $form['#groups']['group_additional_details']->format_settings['formatter'] = 'open';
  }
}

/**
 * Implements hook_menu_alter().
 */
function nurani_helpers_menu_alter(&$items) {
  $items['admin/config/people/accounts']['access callback'] = 'nurani_helpers_user_admin_access';
  $items['admin/config/people/realname_registration']['access callback'] = 'nurani_helpers_user_admin_access';
}

/**
 * Menu access callback to ensure an account meets the original access
 * requirement AND is an administrator user.
 */
function nurani_helpers_user_admin_access($string, $account = NULL) {
  $account = $account ? $account : $GLOBALS['user'];
  return user_access($string, $account) && (in_array('administrator', $account->roles) || $account->uid == 1);
}
