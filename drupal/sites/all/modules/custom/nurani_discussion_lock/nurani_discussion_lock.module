<?php

/**
 * Implementation of hook_theme().
 */
function nurani_discussion_lock_theme($existing, $type, $theme, $path) {
  $hooks = array();
  
  $hooks['nurani_discussion_lock_formatter_countdown'] = array(
    'arguments' => array('element' => NULL),
  );

  return $hooks;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function nurani_discussion_lock_field_formatter_info() {
  return array(
    'countdown' => array(
      'label' => t('Countdown'),
      'field types' => array('datestamp'),
      'multiple values' => CONTENT_HANDLE_CORE
    )
  );
}


function theme_nurani_discussion_lock_formatter_countdown($element) {
  $timestamp = $element['#item']['value'];
  $now = time();

  if (empty($timestamp)) {
    return t('This discussion is not time-limited.');
  }
  else if ($now > $timestamp) {
    return t('This discussion is closed.');
  } 
  else {
    return t('<strong>@time</strong> before close of discussion.', array('@time' => format_interval($timestamp - $now, 1)));
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function nurani_discussion_lock_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // When loading a discussion, check comment status.
  if ($op == 'load' && $node->type == 'discussion') {
    if ($node->field_exp_comments[0]['value'] < time()) {
      $node->node_comment = COMMENT_NODE_READ_ONLY;
    }
  }

  // When saving a discussion, check comment status.
  if ($op == 'presave' && $node->type == 'discussion') {
    $node->node_comment = $node->comment = $node->field_exp_comments[0]['value'] < time() ? COMMENT_NODE_READ_ONLY : COMMENT_NODE_READ_WRITE;
  }
}

